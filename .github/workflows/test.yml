name: Tests

on:
  push:
    branches:
      - main
      - master
      - test/*
  pull_request:
    branches:
      - main
      - master

jobs:
  # All tests under this job are run with pre-computed libR-sys bindings.
  tests_no_bindgen:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (R-${{ matrix.config.r }} rust-${{ matrix.config.rust-version }})
            
    strategy:
      fail-fast: false
      matrix:
        config:
          # Windows jobs with unspecific Rust architecture build for both i686 and x86_64 
          # R integration tests are also executed for both architectures
          - {os: windows-latest, r: 'release', rust-version: 'stable-msvc'}
          # - {os: windows-latest, r: 'release', rust-version: 'nightly-msvc'}
          # - {os: windows-latest, r: 'devel', rust-version: 'stable-msvc'}
          # - {os: windows-latest, r: 'oldrel', rust-version: 'stable-msvc'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}

      # This environment variable enables support for pseudo multi-target cargo builds.
      # Current stable Rust does not support multi-targeting,
      # see https://github.com/rust-lang/cargo/issues/8176
      # The variable is treated as a comma-separated list of valid Rust targets.
      # 'default' value emits no '--target' flag.
      # E.g.: BUILD_TARGETS=i686-pc-windows-gnu,x86_64-pc-windows-gnu builds two times,
      # each time providing '--target=*-pc-windows-gnu' flag to cargo.
      BUILD_TARGETS: default
    
    # PowerShell core is available on all platforms and can be used to unify scripts
    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.config.rust-version }}
          default: true
          components: rustfmt, clippy
      
      - name: Set up R
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
      
      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v1
      
      # All configurations for Windows go here
      # If 'rust-version' has no architecture id, both if conditions are executed
      # Otherwise, only one condition is met
      # $targets variable is used to build targets list used later for cargo build/test
      # The order of if blocks favors x86_64 over i686 paths, which is optimal for multi-targeting
      - name: Configure Windows
        if: startsWith(runner.os, 'Windows')
        # 1. Add rust target
        # 2. Add target name to the $targets variable
        # 3. Add mingw32/mingw64 bin folders to PATH
        # 4. Add R x64/i386 folders to PATH
        run: |
          $targets=@()
          if ($env:RUST_TOOLCHAIN -notlike "*x86_64*") {
            rustup target add i686-pc-windows-gnu ;
            $targets+="i686-pc-windows-gnu"
            echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\i386"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
          if ($env:RUST_TOOLCHAIN -notlike "*i686*") {
            rustup target add x86_64-pc-windows-gnu ;
            $targets+="x86_64-pc-windows-gnu"
            echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\x64"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
          echo "BUILD_TARGETS=$($targets -join ',')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append ;
        env: 
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}

      # This is required for ubuntu r-devel
      # 'Del alias:R' removes 'R' alias which prevents running R 
      - name: Configure Linux
        if: startsWith(runner.os, 'linux')
        run: |
          Del alias:R
          echo "LD_LIBRARY_PATH=$(R -s -e 'cat(normalizePath(R.home()))')/lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      
      # For each target in the BUILD_TARGETS comma-separated list, run cargo build with appropriate target
      # Required by Windows builds, does not affect other platforms
      - name: Build
        run: |
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            echo "::group::Build for $target target"
            cargo build $(if($target -ne 'default') {"--target=$target"} ) 
            echo "::endgroup::"

            if (!$?) { 
              echo "::error::Build for $target target" ;
              throw "Last exit code $LASTEXITCODE"
            }
          }

      # For each target in the BUILD_TARGETS comma-separated list, run cargo test with appropriate target
      # Required by Windows builds, does not affect other platforms
      - name: Run tests
        run: |
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            foreach($i in 1..1000) {
              echo "::group::Test for $target target (attempt $i)"
              cargo test $(if($target -ne 'default') {"--target=$target"} ) -- --nocapture
              echo "::endgroup::"
              
              if (!$?) { 
                echo "::error::Test for $target target" ;
                throw "Last exit code $LASTEXITCODE"
              }
            }
          }


# All tests under this job are run with R devel and freshly generated bindings.
  tests_R_devel_bindgen:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} w/ bindgen (R-${{ matrix.config.r }} rust-${{ matrix.config.rust-version }})
            
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'devel',   rust-version: 'stable-msvc'}
          - {os: windows-latest, r: 'release', rust-version: 'stable-msvc'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      BUILD_TARGETS: default

    # PowerShell core is available on all platforms and can be used to unify scripts
    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.config.rust-version }}
          default: true

      - name: Set up R
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
      

      - name: Configure Windows
        if: startsWith(runner.os, 'Windows')
        # 1. Add rust target
        # 2. Add target name to the $targets variable
        # 3. Add mingw32/mingw64 bin folders to PATH
        # 4. Add R x64/i386 folders to PATH
        run: |
          $targets=@()
          if ($env:RUST_TOOLCHAIN -notlike "*x86_64*") {
            rustup target add i686-pc-windows-gnu ;
            $targets+="i686-pc-windows-gnu"
            echo "C:\msys64\mingw32\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\i386"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
          if ($env:RUST_TOOLCHAIN -notlike "*i686*") {
            rustup target add x86_64-pc-windows-gnu ;
            $targets+="x86_64-pc-windows-gnu"
            echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
            echo "$(Rscript.exe -e 'cat(normalizePath(R.home()))')\bin\x64"  | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append ;
          }
          echo "BUILD_TARGETS=$($targets -join ',')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append ;
        env: 
          RUST_TOOLCHAIN: ${{ matrix.config.rust-version }}

      - name: Configure Linux
        if: startsWith(runner.os, 'linux')
        run: |
          Del alias:R
          echo "LD_LIBRARY_PATH=$(R -s -e 'cat(normalizePath(R.home()))')/lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build
        run: |
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            echo "::group::Build extendr-api for $target target"
            cargo build --manifest-path extendr-api/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} )
            echo "::endgroup::"

            if (!$?) { 
              echo "::error::Build extendr-api for $target target" ;
              throw "Last exit code $LASTEXITCODE"
            }
          }

      - name: Run tests
        run: |
          foreach($target in ($env:BUILD_TARGETS).Split(',')) {
            foreach($i in 1..1000) {
              echo "::group::Test extendr-api \w tests-all for $target target (attempt $i)"
              cargo test --manifest-path extendr-api/Cargo.toml --features tests-all $(if($target -ne 'default') {"--target=$target"} ) -- --nocapture 
              echo "::endgroup::"

              if (!$?) { 
                echo "::error::Test extendr-api \w tests-all for $target target" ;
                throw "Last exit code $LASTEXITCODE"
              }
            }
          }
