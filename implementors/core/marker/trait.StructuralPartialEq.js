(function() {var implementors = {};
implementors["extendr_api"] = [{"text":"impl StructuralPartialEq for Error","synthetic":false,"types":[]},{"text":"impl StructuralPartialEq for Bool","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; StructuralPartialEq for Symbol&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; StructuralPartialEq for Character&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; StructuralPartialEq for Raw&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralPartialEq for Lang&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NV&gt; StructuralPartialEq for Pairlist&lt;NV&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralPartialEq for List&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; StructuralPartialEq for Expr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P, NV&gt; StructuralPartialEq for Env&lt;P, NV&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F, B, E&gt; StructuralPartialEq for Func&lt;F, B, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C, E, V&gt; StructuralPartialEq for Promise&lt;C, E, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; StructuralPartialEq for Primitive&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; StructuralPartialEq for RArray&lt;T, D&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()